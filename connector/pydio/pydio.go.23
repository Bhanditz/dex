// Package mock implements connectors which help test various server components.
package pydio

import (

	"github.com/coreos/dex/connector"

	//"github.com/go-sql-driver/mysql"

	//"time"
	"github.com/coreos/dex/storage"
	"golang.org/x/crypto/bcrypt"
	"context"
	"fmt"
	"github.com/micro/go-micro/errors"
)


type Config struct{
	BoostrapFile string
}



type PydioConnector struct {
	s storage.Storage
}

func (db PydioConnector) Login(ctx context.Context, s connector.Scopes, login, password string) (connector.Identity, bool, error) {
	p, err := db.s.GetPydioUser(login)
	if err != nil {
		if err != storage.ErrNotFound {
			return connector.Identity{}, false, fmt.Errorf("get password: %v", err)
		}
		return connector.Identity{}, false, nil
	}
	if err := bcrypt.CompareHashAndPassword([]byte(p.Password), []byte(password)); err != nil {
		return connector.Identity{}, false, nil
	}
	return connector.Identity{
		UserID:        p.Login,
		Username:      p.Login,
		Email:         p.Login,
		EmailVerified: true,
	}, true, nil
}

func (db PydioConnector) Refresh(ctx context.Context, s connector.Scopes, identity connector.Identity) (connector.Identity, error) {
	// If the user has been deleted, the refresh token will be rejected.
	p, err := db.s.GetPassword(identity.Email)
	if err != nil {
		if err == storage.ErrNotFound {
			return connector.Identity{}, errors.New("user not found","usernot found", 1)
		}
		return connector.Identity{}, fmt.Errorf("get password: %v", err)
	}

	// User removed but a new user with the same email exists.
	if p.UserID != identity.UserID {
		return connector.Identity{}, errors.New("user not found","usernot found", 1)
	}

	// If a user has updated their username, that will be reflected in the
	// refreshed token.
	//
	// No other fields are expected to be refreshable as email is effectively used
	// as an ID and this implementation doesn't deal with groups.
	identity.Username = p.Username

	return identity, nil
}


func (db PydioConnector) ListPydioUsers(){

}

